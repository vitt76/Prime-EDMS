#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Mayan EDMS –¥–ª—è Ubuntu
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./ubuntu-start.sh [start|stop|restart|logs|status|clean]

set -e

COMPOSE_FILE="docker-compose.yml"
PROJECT_NAME="prime-edms"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏
print_header() {
    echo -e "${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if ! docker --version >/dev/null 2>&1; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bash ubuntu-setup.sh"
        exit 1
    fi

    if ! docker-compose --version >/dev/null 2>&1; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã docker
    if ! groups $USER | grep -q docker; then
        print_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ docker. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ Mayan EDMS
start_mayan() {
    print_header "–ó–∞–ø—É—Å–∫ Mayan EDMS..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if docker ps -q -f name="${PROJECT_NAME}_app_1" | grep -q .; then
        print_warning "Mayan EDMS —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É (–ë–î, Redis, RabbitMQ)
    docker-compose -f $COMPOSE_FILE up -d postgresql redis rabbitmq
    print_success "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
    print_header "–û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL..."
    counter=0
    while [ $counter -lt 30 ]; do
        echo "–ü–æ–ø—ã—Ç–∫–∞ $((counter + 1))/30: –ø—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
        if docker exec ${PROJECT_NAME}_postgresql_1 pg_isready -U mayan >/dev/null 2>&1; then
            print_success "PostgreSQL –≥–æ—Ç–æ–≤"
            break
        else
            echo "PostgreSQL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥..."
        fi
        sleep 5
        counter=$((counter + 1))
    done

    if [ $counter -ge 30 ]; then
        print_warning "PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 150 —Å–µ–∫—É–Ω–¥"
        exit 1
    fi

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
    print_header "–û–∂–∏–¥–∞–Ω–∏–µ Redis..."
    for i in {1..20}; do
        if docker exec ${PROJECT_NAME}_redis_1 redis-cli -a mayanredispassword ping >/dev/null 2>&1; then
            print_success "Redis –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 3
        echo -n "."
    done

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RabbitMQ
    print_header "–û–∂–∏–¥–∞–Ω–∏–µ RabbitMQ..."
    for i in {1..40}; do
        if docker exec ${PROJECT_NAME}_rabbitmq_1 rabbitmqctl node_health_check >/dev/null 2>&1; then
            print_success "RabbitMQ –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 5
        echo -n "."
    done

    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫ Mayan EDMS..."
    sleep 10

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Docker
    docker run -d \
        --name ${PROJECT_NAME}_app_1 \
        --network ${PROJECT_NAME}_default \
        -p 80:8000 -p 443:8443 \
        -e MAYAN_DATABASES="{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'mayan','PASSWORD':'mayandbpass','USER':'mayan','HOST':'${PROJECT_NAME}_postgresql_1'}}" \
        -e MAYAN_CELERY_BROKER_URL="amqp://mayan:mayanrabbitpass@${PROJECT_NAME}_rabbitmq_1:5672/mayan" \
        -e MAYAN_CELERY_RESULT_BACKEND="redis://:mayanredispassword@${PROJECT_NAME}_redis_1:6379/1" \
        -e MAYAN_LOCK_MANAGER_BACKEND="mayan.apps.lock_manager.backends.redis_lock.RedisLock" \
        -e MAYAN_LOCK_MANAGER_BACKEND_ARGUMENTS="{'redis_url':'redis://:mayanredispassword@${PROJECT_NAME}_redis_1:6379/2'}" \
        -e COMMON_EXTRA_APPS="['mayan.apps.converter_pipeline_extension']" \
        --env-file app.env \
        --volume mayan_data:/var/lib/mayan \
        --volume $(pwd)/config.yml:/opt/mayan-edms/config.yml \
        prime-edms_app
    sleep 30

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if docker ps -q -f name="${PROJECT_NAME}_app_1" | grep -q .; then
        print_success "Mayan EDMS –∑–∞–ø—É—â–µ–Ω!"
        echo ""
        echo "üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ./ubuntu-start.sh logs"
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mayan EDMS
stop_mayan() {
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mayan EDMS..."

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if docker ps -q -f name="${PROJECT_NAME}_app_1" | grep -q .; then
        print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        docker stop ${PROJECT_NAME}_app_1 >/dev/null 2>&1
        docker rm ${PROJECT_NAME}_app_1 >/dev/null 2>&1
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    docker-compose -f $COMPOSE_FILE down
    print_success "Mayan EDMS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Mayan EDMS
restart_mayan() {
    print_header "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Mayan EDMS..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if docker ps -q -f name="${PROJECT_NAME}_app_1" | grep -q .; then
        print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        docker stop ${PROJECT_NAME}_app_1 >/dev/null 2>&1
        docker rm ${PROJECT_NAME}_app_1 >/dev/null 2>&1
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print_header "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    docker-compose -f $COMPOSE_FILE restart postgresql redis rabbitmq 2>/dev/null || docker-compose -f $COMPOSE_FILE up -d postgresql redis rabbitmq

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_success "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
    counter=0
    while [ $counter -lt 30 ]; do
        echo "–ü–æ–ø—ã—Ç–∫–∞ $((counter + 1))/30: –ø—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
        if docker exec ${PROJECT_NAME}_postgresql_1 pg_isready -U mayan -d mayan >/dev/null 2>&1; then
            print_success "PostgreSQL –≥–æ—Ç–æ–≤"
            break
        else
            echo "PostgreSQL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥..."
        fi
        sleep 5
        counter=$((counter + 1))
    done

    if [ $counter -ge 30 ]; then
        print_warning "PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 150 —Å–µ–∫—É–Ω–¥"
        exit 1
    fi

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
    for i in {1..20}; do
        if docker exec ${PROJECT_NAME}_redis_1 redis-cli -a mayanredispassword ping >/dev/null 2>&1; then
            print_success "Redis –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 3
        echo -n "."
    done

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RabbitMQ
    for i in {1..40}; do
        if docker exec ${PROJECT_NAME}_rabbitmq_1 rabbitmqctl node_health_check >/dev/null 2>&1; then
            print_success "RabbitMQ –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 5
        echo -n "."
    done

    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫ Mayan EDMS..."
    sleep 10

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Docker
    docker run -d \
        --name ${PROJECT_NAME}_app_1 \
        --network ${PROJECT_NAME}_default \
        -p 80:8000 -p 443:8443 \
        -e MAYAN_DATABASES="{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'mayan','PASSWORD':'mayandbpass','USER':'mayan','HOST':'${PROJECT_NAME}_postgresql_1'}}" \
        -e MAYAN_CELERY_BROKER_URL="amqp://mayan:mayanrabbitpass@${PROJECT_NAME}_rabbitmq_1:5672/mayan" \
        -e MAYAN_CELERY_RESULT_BACKEND="redis://:mayanredispassword@${PROJECT_NAME}_redis_1:6379/1" \
        -e MAYAN_LOCK_MANAGER_BACKEND="mayan.apps.lock_manager.backends.redis_lock.RedisLock" \
        -e MAYAN_LOCK_MANAGER_BACKEND_ARGUMENTS="{'redis_url':'redis://:mayanredispassword@${PROJECT_NAME}_redis_1:6379/2'}" \
        -e MAYAN_COMMON_EXTRA_APPS="['mayan.apps.converter_pipeline_extension']" \
        --env-file app.env \
        --volume mayan_data:/var/lib/mayan \
        --volume $(pwd)/config.yml:/opt/mayan-edms/config.yml \
        prime-edms_app
    sleep 30

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if docker ps -q -f name="${PROJECT_NAME}_app_1" | grep -q .; then
        print_success "Mayan EDMS –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"
        echo ""
        echo "üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost"
    else
        print_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ./ubuntu-start.sh logs"
        exit 1
    fi
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
show_logs() {
    print_header "–õ–æ–≥–∏ Mayan EDMS (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
    docker logs -f ${PROJECT_NAME}_app_1 2>&1 || docker-compose -f $COMPOSE_FILE logs -f
}

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
show_status() {
    print_header "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f $COMPOSE_FILE ps
    echo ""
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep "${PROJECT_NAME}_app_1\|NAMES" || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"

    echo ""
    print_header "Healthchecks:"
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep "$PROJECT_NAME\|NAMES" || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

    echo ""
    print_header "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" 2>/dev/null || \
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
clean_system() {
    print_warning "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ Mayan EDMS!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞..."

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        docker-compose -f $COMPOSE_FILE down -v 2>/dev/null || true
        docker stop ${PROJECT_NAME}_app_1 2>/dev/null || true
        docker rm ${PROJECT_NAME}_app_1 2>/dev/null || true

        # –£–¥–∞–ª–µ–Ω–∏–µ volumes
        docker volume rm ${PROJECT_NAME}_postgres_data ${PROJECT_NAME}_redis_data ${PROJECT_NAME}_rabbitmq_data mayan_data 2>/dev/null || true

        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        docker system prune -f >/dev/null 2>&1

        print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        print_warning "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –°–ø—Ä–∞–≤–∫–∞
show_help() {
    echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Mayan EDMS –¥–ª—è Ubuntu"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å Mayan EDMS"
    echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Mayan EDMS"
    echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Mayan EDMS"
    echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  clean   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–û–ü–ê–°–ù–û!)"
    echo "  help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start    # –ó–∞–ø—É—Å–∫"
    echo "  $0 logs     # –õ–æ–≥–∏"
    echo "  $0 status   # –°—Ç–∞—Ç—É—Å"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local command="$1"

    case "$command" in
        start)
            check_docker
            start_mayan
            ;;
        stop)
            stop_mayan
            ;;
        restart)
            check_docker
            restart_mayan
            ;;
        logs)
            show_logs
            ;;
        status)
            show_status
            ;;
        clean)
            clean_system
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            if [ -z "$command" ]; then
                check_docker
                start_mayan
            else
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
                echo ""
                show_help
                exit 1
            fi
            ;;
    esac
}

main "$@"
