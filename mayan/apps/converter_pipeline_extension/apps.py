from pathlib import Path

from mayan.apps.common.apps import MayanAppConfig
from django.utils.translation import ugettext_lazy as _


class ConverterPipelineExtensionApp(MayanAppConfig):
    """
    Converter Pipeline Extension - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤ –¥–ª—è Mayan EDMS.
    """
    app_namespace = 'converter_pipeline_extension'
    app_url = 'converter-pipeline'
    has_rest_api = False
    has_static_media = False
    has_tests = True
    name = 'mayan.apps.converter_pipeline_extension'
    verbose_name = _('Converter Pipeline Extension')
    label = 'converter_pipeline_extension'

    def ready(self):
        super().ready()
        print('üî• Converter Pipeline Extension loaded successfully!')

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è URL –≤—Ä—É—á–Ω—É—é (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è MayanAppConfig –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        try:
            self._register_urls()
        except Exception as e:
            print(f'‚ùå Failed to register URLs: {e}')
            raise

        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
        try:
            self._cleanup_legacy_frontend_assets()
        except Exception as e:
            print(f'‚ö†Ô∏è Failed to cleanup legacy frontend assets: {e}')

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è backend'–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        try:
            self._patch_converter_backend()
        except Exception as e:
            print(f'‚ùå Failed to patch converter backend: {e}')

    def _register_urls(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è URL –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:
            from django.urls import include, path
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∏–º–ø–æ—Ä—Ç, —á—Ç–æ –∏ –≤ MayanAppConfig
            from mayan.urls import urlpatterns as mayan_urlpatterns

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º urls —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
            from . import urls
            mayan_urlpatterns.append(
                path('converter-pipeline/', include((urls.urlpatterns, 'converter_pipeline_extension')))
            )
            print('‚úÖ URLs registered successfully!')
        except Exception as e:
            print(f'‚ùå Failed to register URLs: {e}')
            raise

    def _cleanup_legacy_frontend_assets(self):
        """–£–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JS, –¥–æ–±–∞–≤–ª—è–≤—à–∏–π –ø—É–Ω–∫—Ç Convert —á–µ—Ä–µ–∑ DOM."""
        try:
            import mayan.apps.appearance as appearance_module
        except ImportError:
            print('‚ö†Ô∏è Appearance module not found; skipping legacy cleanup.')
            return

        appearance_path = Path(appearance_module.__file__).resolve().parent
        base_template_path = appearance_path / 'templates' / 'appearance' / 'base.html'
        legacy_script_tag = '<script src="{% static "appearance/js/converter_extension.js" %}"></script>'

        if base_template_path.exists():
            content = base_template_path.read_text(encoding='utf-8')
            if legacy_script_tag in content:
                base_template_path.write_text(
                    content.replace(f'{legacy_script_tag}\n', '').replace(legacy_script_tag, ''),
                    encoding='utf-8'
                )
                print('üßπ Removed legacy converter_extension.js script tag from appearance/base.html')

        legacy_js_path = appearance_path / 'static' / 'appearance' / 'js' / 'converter_extension.js'
        if legacy_js_path.exists():
            try:
                legacy_js_path.unlink()
                print('üßπ Deleted legacy converter_extension.js file')
            except Exception as exc:
                print(f'‚ö†Ô∏è Failed to delete legacy converter_extension.js: {exc}')


    def _patch_converter_backend(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä Mayan EDMS"""
        print('üîß Starting converter backend patching...')
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä Mayan EDMS
            print('üì¶ Importing Mayan Python converter...')
            from mayan.apps.converter.backends.python import Python
            print('‚úÖ Python converter imported successfully')

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ convert
            original_convert = Python.convert
            print('üíæ Original convert method saved')

            def patched_convert(self, *args, **kwargs):
                print(f'üîÑ Convert called for MIME type: {self.mime_type}')
                # –í—ã–∑–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                result = original_convert(self, *args, **kwargs)
                print(f'üìã Original convert result: {type(result)}')

                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç), –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ
                if result is None and self.mime_type and self.mime_type.startswith('video/'):
                    print(f'üé¨ Converting video file with MIME type: {self.mime_type}')
                    try:
                        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à VideoConverter
                        print('üé• Importing VideoConverter...')
                        from .backends.video import VideoConverter
                        print('‚úÖ VideoConverter imported')

                        # –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä VideoConverter
                        print('üèóÔ∏è Creating VideoConverter instance...')
                        video_converter = VideoConverter(self.file_object)
                        print('‚úÖ VideoConverter instance created')

                        # –ü–æ–ª—É—á–∏—Ç—å preview
                        print('üé¨ Generating video preview...')
                        preview_content = video_converter.convert_to_preview()
                        print(f'üì∏ Preview content generated: {type(preview_content)}')

                        if preview_content:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ContentFile –≤ PIL Image
                            print('üñºÔ∏è Converting to PIL Image...')
                            from PIL import Image
                            from io import BytesIO

                            preview_data = BytesIO(preview_content.read())
                            result = Image.open(preview_data)
                            print('‚úÖ Video preview converted to PIL Image successfully!')
                        else:
                            print('‚ö†Ô∏è Failed to generate video preview')

                    except Exception as e:
                        print(f'‚ùå Video conversion failed: {e}')
                        import traceback
                        traceback.print_exc()

                return result

            # –ó–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ convert
            print('üîÑ Replacing convert method...')
            Python.convert = patched_convert
            print('‚úÖ Video converter backend patched successfully!')

        except Exception as e:
            print(f'‚ùå Failed to patch converter backend: {e}')
            import traceback
            traceback.print_exc()
